-- show the objects of a user
SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('OBJECT');
SELECT OBJECT_NAME, OBJECT_TYPE FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('TABLE','VIEW');
-- OBJECT= FUNCTION/TABLE/ANYTHING

--VIEW 
CREATE OR REPLACE VIEW RECEIVE AS
SELECT A_ID,SUM(AMOUNT) AS RECEIVED_MONEY
FROM TRANSACTIONS
WHERE TYPE=0
GROUP BY A_ID
ORDER BY A_ID;

----------------------------------------------

--FUNCTION
CREATE OR REPLACE FUNCTION total_items_shipped(YEAR INT)
RETURN INT 
IS
total_items INT DEFAULT 0;

BEGIN

SELECT SUM(QUANTITY)
INTO total_items
FROM ORDERS, ORDER_ITEMS
WHERE ORDERS.ORDER_ID=ORDER_ITEMS.ORDER_ID AND ORDERS.STATUS=1 AND ORDERS.ORDER_YEAR=YEAR;
RETURN total_items;

END;
/

--PROCEDURE
CREATE OR REPLACE PROCEDURE PROC1(ID IN NUMBER, SALARY OUT NUMBER)
IS
X INT :=0;

BEGIN
SELECT MAX(SALARY) INTO SALARY
FROM EMP
WHERE ID = ID;
END;


--anonymous block
DECLARE
amount NUMBER;
BEGIN
PROC1(101, amount);
dbms_output.put_line(amount);
END;


--CALLING
SELECT total_items_shipped(2011) from dual;

SET SERVEROUTPUT ON;
DBMS_OUTPUT.PUT_LINE('Sales: ' || total_items_shipped(2011);

select id, get_cgpa(sid) 		--get_cgpa() is a finction 
from students 
where dept='CSE';

---------------------------------------------------

--TRIGGER

CREATE OR REPLACE TRIGGER trigger_name
BEFORE/AFTER
INSERT/DELETE/UPDATE COL1,COL2
ON table_name
FOR EACH ROW --ROW LEVEL 
DECLARE
AGE INT;
BEGIN

-- ACTION

END;
/


CREATE OR REPLACE TRIGGER grades_before_insert
AFTER 
update
ON GRADES
FOR EACH ROW
DECLARE
v_username varchar2 (10) ;
BEGIN
dbms_output . put_line (’hello world ’) ;
END;
/
---------------------------------------------------

--IF else
IF(CONDITION)
THEN MY_STATEMENT
ELSIF(CONDITION)
THEN MY_STATEMENT
ELSIF
THEN
ELSE DEFAULT_STATEMENT

END IF;


------------------------------------------

--DECODE 

SELECT product id, DECODE(warehouse id, 1 , 'Southlake',
										2 , 'San Francisco',
										3 , 'New Jersey',
										4 , 'Seattle',
											'Non domestic') "Location of inventory"
FROM inventories
WHERE product id <100;

-----------------------------------------------

--RANK()

select sid, name, cgpa,
rank() over (order by cgpa desc) position
from students;


--Rollbased control and view implementation

CREATE TABLE CUSTOMER3
(
C_ID INT UNIQUE,
EMAIL VARCHAR2(30) UNIQUE,
NAME VARCHAR2(20),
ADDRESS VARCHAR2(20),
PHONE_NO INT,
CARD_INFO INT,
CONSTRAINT PK_CUSTOMER PRIMARY KEY(C_ID,EMAIL)
);



CREATE TABLE ORDER3
(
ORDER_ID INT,
SHOPPING_INFO VARCHAR2(20),
C_ID INT,
EMAIL VARCHAR2(30),
CONSTRAINT PK_ORDER PRIMARY KEY(ORDER_ID),
CONSTRAINT FK_ORDER FOREIGN KEY(C_ID) REFERENCES CUSTOMER3(C_ID) ON DELETE CASCADE,
CONSTRAINT FK_ORDER2 FOREIGN KEY(EMAIL) REFERENCES CUSTOMER3(EMAIL) ON DELETE CASCADE
);



CREATE TABLE SHOPPING_CART3
(
CART_ID INT,
DATE_ADDED DATE,
CONSTRAINT PK_SHOPPING_CART3 PRIMARY KEY(CART_ID)
);



CREATE TABLE PRODUCT3
(
P_ID INT,
NAME VARCHAR2(20),
PRICE INT,
DESCRIPTION VARCHAR2(20),
CONSTRAINT PK_PRODUCT PRIMARY KEY(P_ID),
CART_ID INT,
CAT_ID INT,
CONSTRAINT FK_PRODUCT FOREIGN KEY(CART_ID) REFERENCES SHOPPING_CART3(CART_ID) ON DELETE CASCADE,
CONSTRAINT FK_PRODUCT2 FOREIGN KEY(CAT_ID) REFERENCES PRODUCT_CATEGORY3(CAT_ID)	ON DELETE CASCADE
);



CREATE TABLE PRODUCT_CATEGORY3
(
CAT_ID INT,
NAME VARCHAR2(20),
CONSTRAINT PK_PC PRIMARY KEY(CAT_ID),
P_ID INT,
);



CREATE TABLE DEPT3
(
DEPT_ID INT,
NAME VARCHAR2(20),
DESCRIPTION VARCHAR2(20),
CONSTRAINT PK_DEPT PRIMARY KEY(DEPT_ID),
CAT_ID INT,
CONSTRAINT FK_DEPT FOREIGN KEY(CAT_ID)REFERENCES PRODUCT_CATEGORY3(CAT_ID)   	-- AFTER DELETING A CATEGORY OF PRODUCT STILL WE MAY NEED THE DEPARTMENT
);


CREATE TABLE SHOPPING3
(
CUSTOMER_ID INT,
EMAIL VARCHAR2(20),
NAME VARCHAR2(20), 
ADDRESS VARCHAR2(20),
PHONE_NO INT,
CARD_INFO INT,
P_ID INT,
DATE_ADDED DATE,
ORDER_ID INT,
QUANTITY INT,
CART_ID INT,
C_ID INT,
CONSTRAINT PK_SHOPPING PRIMARY KEY(P_ID),
CONSTRAINT FK_SHOPPING2 FOREIGN KEY(C_ID) REFERENCES CUSTOMER3(C_ID) ON DELETE CASCADE,
CONSTRAINT FK_SHOPPING3 FOREIGN KEY(EMAIL) REFERENCES CUSTOMER3(EMAIL) ON DELETE CASCADE,
CONSTRAINT FK_SHOPPING4 FOREIGN KEY(CART_ID) REFERENCES SHOPPING_CART3(CART_ID) ON DELETE CASCADE,
CONSTRAINT FK_SHOPPING5 FOREIGN KEY(P_ID) REFERENCES PRODUCT3(P_ID) ON DELETE CASCADE,
CONSTRAINT FK_SHOPPING6 FOREIGN KEY(ORDER_ID) REFERENCES ORDER3(ORDER_ID) ON DELETE CASCADE
);





--VIEW PART

CREATE VIEW SHOPPING_CART_DETAILS AS
SELECT SHOPPING3.CART_ID,SHOPPING3.DATE_ADDED,PRODUCT3.P_ID,PRODUCT3.NAME,PRODUCT3.PRICE
FROM SHOPPING3,PRODUCT3
WHERE SHOPPING3.P_ID=PRODUCT3.P_ID;

CREATE VIEW PRODUCT_PURCHASE_TOTAL AS 
SELECT DATE_ADDED,COUNT(P_ID) AS NUMBER_OF_PRODUCT
FROM SHOPPING_CART_DETAILS
GROUP BY DATE_ADDED;


CREATE VIEW CUSTOMER_PURCHASE_HISTORY AS
SELECT CUSTOMER3.C_ID,CUSTOMER3.EMAIL,CUSTOMER3.NAME,CUSTOMER3.ADDRESS,CUSTOMER3.PHONE_NO,CUSTOMER3.CARD_INFO,SHOPPING3.P_ID,SHOPPING3.QUANTITY
FROM CUSTOMER3,SHOPPING3
WHERE CUSTOMER3.C_ID=SHOPPING3.C_ID;





--ACCESS

CREATE ROLE VIEW_CUSTOMER;
GRANT SELECT ON CUSTOMER3 TO VIEW_CUSTOMER;
CREATE USER CUSTOMER_SAJU IDENTIFIED BY S123;
GRANT CREATE SESSION TO CUSTOMER_SAJU;
GRANT VIEW_CUSTOMER TO CUSTOMER_SAJU;


CREATE ROLE EDIT_MODIFY_CART_CUSTOMER;
GRANT SELECT ON SHOPPING3 TO EDIT_MODIFY_CART_CUSTOMER;
GRANT UPDATE ON SHOPPING3 TO EDIT_MODIFY_CART_CUSTOMER;
GRANT INSERT ON SHOPPING3 TO EDIT_MODIFY_CART_CUSTOMER;
GRANT DELETE ON SHOPPING3 TO EDIT_MODIFY_CART_CUSTOMER;
GRANT SELECT ON SHOPPING_CART3 TO EDIT_MODIFY_CART_CUSTOMER;
GRANT UPDATE ON SHOPPING_CART3 TO EDIT_MODIFY_CART_CUSTOMER;
GRANT INSERT ON SHOPPING_CART3 TO EDIT_MODIFY_CART_CUSTOMER;
GRANT DELETE ON SHOPPING_CART3 TO EDIT_MODIFY_CART_CUSTOMER;

CREATE USER SALES_FAHAD IDENTIFIED BY S111;
GRANT CREATE SESSION TO SALES_FAHAD;
GRANT EDIT_MODIFY_CART_CUSTOMER TO SALES_FAHAD;
